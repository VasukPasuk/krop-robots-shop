generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @unique @default(autoincrement())

  name           String
  first_surname  String
  second_surname String

  email    String @unique
  login    String @unique
  password String

  activated       Boolean @default(false)
  activation_link String? @unique

  avatar_src String? @unique

  role Role @default(CUSTOMER)

  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  User_Favourite_Product UserFavouriteProduct[]
  Review                 Review[]

  cart Cart?

  @@map("users")
}

model Tag {
  id Int @unique @default(autoincrement())

  name        String  @id @unique
  description String?

  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  ProductHaveTag ProductHaveTag[]

  @@map("tags")
}

model Product {
  id Int @unique @default(autoincrement())

  name        String  @id @unique
  discount    Int     @default(0)
  popular     Boolean @default(false)
  description String
  rating      Int     @default(0)
  published   Boolean @default(false)

  photos Photo[]

  category      Category @relation(fields: [category_name], references: [name])
  category_name String

  User_Favourite_Product UserFavouriteProduct[]
  ProductHaveTag         ProductHaveTag[]

  variants    Variant[]
  order_items OrderItem[]

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  CartItem   CartItem[]
  Review     Review[]

  @@map("products")
}

model ProductHaveTag {
  product      Product @relation(fields: [product_name], references: [name], onDelete: Cascade)
  product_name String

  tag      Tag    @relation(fields: [tag_name], references: [name], onDelete: Cascade)
  tag_name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([tag_name, product_name])
  @@map("products_have_Tags")
}

model UserFavouriteProduct {
  id Int @id @default(autoincrement())

  product      Product @relation(fields: [product_name], references: [name], onDelete: Cascade)
  product_name String

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, product_name])
  @@map("users_favourite_products")
}

model Review {
  id Int @id @default(autoincrement())

  product      Product @relation(fields: [product_name], references: [name])
  product_name String

  name    String
  surname String

  body String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?

  @@map("reviews")
}

model Category {
  id Int @unique @default(autoincrement())

  name        String  @id @unique
  description String?

  products Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("categories")
}

model Variant {
  id Int @id @default(autoincrement())

  height Int
  width  Int
  length Int
  weight Int
  price  Int

  order_items OrderItem[]

  product      Product    @relation(fields: [product_name], references: [name], onDelete: Cascade)
  product_name String
  CartItem     CartItem[]

  size_label String @default("Стандартний")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_name, size_label])
  @@map("variants")
}

model Order {
  id Int @id @default(autoincrement())

  phone_number   String
  email          String
  name           String
  first_surname  String
  second_surname String

  comment      String?
  payment_type String
  delivery     Json

  total_price Int
  total_items Int

  items OrderItem[]

  status OrderStatus @default(PROCESSING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id Int @id @default(autoincrement())

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_name], references: [name])
  color   Color   @relation(fields: [color_name], references: [name])
  variant Variant @relation(fields: [variant_id], references: [id])

  order_id     Int
  product_name String
  color_name   String
  variant_id   Int
  amount       Int    @default(1)
  price        Int

  plastic Plastic @default(CoPET)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_items")
}

model Cart {
  id Int @id @default(autoincrement())

  user        User       @relation(fields: [user_id], references: [id])
  user_id     Int        @unique
  items       CartItem[]
  total_price Int
  total_items Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id Int @id @default(autoincrement())

  cart         Cart    @relation(fields: [cart_id], references: [id])
  cart_id      Int
  product      Product @relation(fields: [product_name], references: [name])
  product_name String
  color        Color   @relation(fields: [color_name], references: [name])
  color_name   String
  variant      Variant @relation(fields: [variant_id], references: [id])
  variant_id   Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("cart_items")
}

model Photo {
  id     Int    @id @default(autoincrement())
  name   String @unique @default(uuid())
  source String @unique

  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  product      Product  @relation(fields: [product_name], references: [name], onDelete: Cascade)
  product_name String

  @@map("photos")
}

model Color {
  id Int @unique @default(autoincrement())

  name String @id @unique
  hex  String @unique

  order_items OrderItem[]

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  CartItem   CartItem[]

  @@map("colors")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PROCESSING
  FULFILLED
}

enum Plastic {
  CoPET
  PLA
}
